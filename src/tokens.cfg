'tokens': {
	/// required, else library WILL crash.
	'use golang-style' false
	
	/**
	 * Max tokens per tokenization.
	 * Value of 0 will tokenize the ENTIRE source code in one go.
	 */
	/// required, else library WILL crash.
	'on demand' 0
	
	'comments': {
		/// Single-line comments have an empty string value.
		"//": ""
		
		/// Multi-line comments have their ending symbols as their value.
		"/*": "*/"
	}
	
	/// token literals for Targum are C or Golang-like.
	'invalid': Iota    /// Iota's first is 0. Token value of 0 is considered INVALID.
	'comment': Iota
	'identifier': Iota
	'integer': Iota
	'float': Iota
	'string': Iota
	'rune': Iota
	
	/// optional, comment out using /**/ to prevent lexing whitespace.
	/*
	'whitespace': {
		'space': Iota
		'tab': Iota
		'newline': Iota
	}
	*/
	
	/// optional, comment out using /**/ to prevent lexing keywords.
	'keywords': {
		"asm": Iota,
		"auto": Iota,
		"break": Iota,
		"case": Iota,
		"char": Iota,
		"const": Iota,
		"continue": Iota,
		"default": Iota,
		"do": Iota,
		"double": Iota,
		"else": Iota,
		"enum": Iota,
		"extern": Iota,
		"float": Iota,
		"for": Iota,
		"goto": Iota,
		"if": Iota,
		"inline": Iota,
		"int": Iota,
		"long": Iota,
		"register": Iota,
		"restrict": Iota,
		"return": Iota,
		"short": Iota,
		"signed": Iota,
		"sizeof": Iota,
		"static": Iota,
		"struct": Iota,
		"switch": Iota,
		"typedef": Iota,
		"union": Iota,
		"unsigned": Iota,
		"void": Iota,
		"volatile": Iota,
		"while": Iota,
		"_Alignas": Iota,
		"_Alignof": Iota,
		"_Atomic": Iota,
		"_Bool": Iota,
		"_Complex": Iota,
		"_Generic": Iota,
		"_Imaginary": Iota,
		"_Noreturn": Iota,
		"_Static_assert": Iota,
		"_Thread_local": Iota,
	}
	
	/// optional, comment out using /**/ to prevent lexing operators.
	'operators': {
		"#": Iota,
		"+": Iota,
		"-": Iota,
		";": Iota,
		"(": Iota,
		")": Iota,
		"*": Iota,
		"/": Iota,
		"<<": Iota,
		">>": Iota,
		"==": Iota,
		">=": Iota,
		"<=": Iota,
		"&": Iota,
		"&&": Iota,
		"|": Iota,
		"||": Iota,
		"%": Iota,
		".": Iota,
		":": Iota,
		"?": Iota,
		"^": Iota,
		">": Iota,
		"<": Iota,
		"~": Iota,
		"!": Iota,
		"[": Iota,
		"]": Iota,
		"=": Iota,
		",": Iota,
		"{": Iota,
		"}": Iota,
		"->": Iota,
		"++": Iota,
		"--": Iota,
		"<<=": Iota,
		">>=": Iota,
		"+=": Iota,
		"-=": Iota,
		"*=": Iota,
		"/=": Iota,
		"&=": Iota,
		"|=": Iota,
		"^=": Iota,
		"!=": Iota,
		"...": Iota
	}
}

